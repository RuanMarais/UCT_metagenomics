"""
******************************************************************************************************************
General helper functions for the pipeline
******************************************************************************************************************
"""

from collections import defaultdict
import os


def filename_list_generate(file_identifier, folder_path):
    filenames_output = []
    for file in os.listdir(folder_path):
        if os.path.isfile(os.path.join(folder_path, file)):
            if file_identifier in file:
                filenames_output.append(file)
    return filenames_output


def paired_read_list_generate(id_length, file_length, file_id_r1, file_id_r2, filename_list, file_folder):
    # Separate filenames by id
    sample_sorted_dict = defaultdict(list)
    for file in filename_list:
        unique_filename = file[:id_length]
        sample_sorted_dict[unique_filename].append(file)

    # Separate pairs
    paired_sorted_dict = {}
    for key, files in sample_sorted_dict.items():
        read_1 = None
        read_2 = None
        for file in files:
            if file_id_r1 in file:
                read_1 = file
            elif file_id_r2 in file:
                read_2 = file
        if read_1 is not None and read_2 is not None:
            read_out_1 = os.path.join(file_folder, read_1)
            read_out_2 = os.path.join(file_folder, read_2)
            output = (read_out_1, read_out_2)
            paired_sorted_dict[read_1[:file_length]] = output

    return paired_sorted_dict


def populate_krakenfile_dictionary(kraken2_results_directory, logger):
    """
    Generates a dictionary of krakenfiles from the kraken2 results directory
    generated by the meta_analysis function
    :param kraken2_results_directory: directory path
    :param logger: logging object
    :return: a dictionary of krakenfiles
    """
    # Generate krakenfile dict for kraken2 database 1
    krakenfile_dict = {}
    folders_kraken = os.listdir(kraken2_results_directory)
    directory_paths_kraken = [(os.path.join(kraken2_results_directory, folder), folder)
                              for folder in folders_kraken
                              if os.path.isdir(os.path.join(kraken2_results_directory, folder))]
    for directory in directory_paths_kraken:
        logger.info(f'Kraken2 krakenfile retrieval: {directory}')
        filename_1 = f'{directory[1]}_krakenfile'
        file_1 = os.path.join(directory[0], filename_1)
        if os.path.isfile(file_1):
            logger.info(f'Kraken2 krakenfile assigned to dictionary: {directory[1]}')
            krakenfile_dict[directory[1]] = file_1
        else:
            logger.error(f'Kraken2 krakenfile not found: {directory[1]}')
    return krakenfile_dict
